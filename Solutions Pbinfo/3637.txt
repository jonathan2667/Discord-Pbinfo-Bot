#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());


ll rec(vector<int> &v, int original_n, int l, int r)
{
    unordered_map<int, int> f;
    for (int i = l; i <= r; ++i)
        ++f[v[i]];
    int mn = original_n, mx = 0;
    for (int i = l; i <= r; ++i){
        mn = min(mn, f[v[i]]);
        mx = max(mx, f[v[i]]);
    }
    ll ans = 1ll*mn*mx;
    int first = -1;
    vector<pair<int, int>> subintervals;
    for (int i = l; i <= r; ++i)
        if (f[v[i]] != mn) {
            if (first == -1)
                first = i;
        }else {
            if (first != -1) {
                subintervals.push_back(make_pair(first, i-1));
                first = -1;
            }
        }
    if (first != -1)
        subintervals.push_back(make_pair(first, r));
    f.clear(); //if we don't clear f then memory can wind up to nsqrtn and we don't want that
    for (auto x : subintervals)
        ans = max(ans, rec(v, original_n, x.first, x.second));
    return ans;
}

ll solve(vector<int> &v)
{
    return rec(v, v.size(), 0, v.size()-1);
}

int main()
{
    int n;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; ++i)
        cin >> v[i];
    cout << solve(v) << "\n";
    return 0;
}