#define TuTTy "Cosmin-Mihai Tutunaru"
#include <cstdio>
#include <vector>
#include <algorithm>
#define infile "naveplanare.in"
#define outfile "naveplanare.out"
#define nmax 203
#define xmax 1013
#define inf (1<<29)

using namespace std;

int dp[2][nmax][2*xmax + 2*nmax];
vector<int> vx, vy;
int n, k;

int abs(int x) {
    if (x < 0) {
        return -x;
    }

    return x;
}

int solve(vector<int> v, int k) {
    int n = v.size();
    sort(v.begin(), v.end());

    for (size_t i = 0; i < v.size(); ++i) {
        v[i] += xmax + 2 * nmax;
    }

    for (int j = 0; j < nmax; ++j) {
        for (int t = 0; t < 2*xmax + 2*nmax; ++t) {
            dp[0][j][t] = inf;
        }
    }

    for (int t = 0; t < 2*xmax + 2*nmax; ++t) {
        dp[0][1][t] = abs(t - v[0]);

        if (t) {
            dp[0][1][t] = min(dp[0][1][t], dp[0][1][t-1]);
        }
    }

    for (int i = 1; i < n; ++i) {
        for (int j = 0; j < n+1; ++j) {
            for (int t = 0; t < 2*xmax + 2*nmax; ++t) {
                dp[i&1][j][t] = abs(t - v[i]) + dp[(i-1)&1][j][t];

                if (j && t) {
                    dp[i&1][j][t] = min(
                        dp[i&1][j][t],
                        abs(t - v[i]) + dp[(i-1)&1][j-1][t-1]
                    );
                }

                if (t) {
                    dp[i&1][j][t] = min(dp[i&1][j][t], dp[i&1][j][t-1]);
                }
            }
        }
    }

    int ret = inf;

    for (int j = k; j < n+1; ++j) {
        for (int t = 0; t < 2*xmax + 2*nmax; ++t) {
            ret = min(ret, dp[(n-1)&1][j][t]);
        }
    }

    return ret;
}


int main() {
    freopen(infile, "r", stdin);
    freopen(outfile, "w", stdout);

    scanf("%d %d", &n, &k);

    for (int i = 0; i < n; ++i) {
        int x, y;
        scanf("%d %d", &x, &y);
        vx.push_back(x);
        vy.push_back(y);
    }

    printf("%d\n", solve(vx, k) + solve(vy, k));

    fclose(stdin);
    fclose(stdout);
    return 0;
}
