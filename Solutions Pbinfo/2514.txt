///100p - DFS + greedy cu bitseturi pt. abilitati
#include <bits/stdc++.h>
using namespace std;

struct capetenie{
    short x, y;
    bitset <1001> a;
}C[1001], Durotan;

vector < short > G[1003];
bitset <1001> ab[1001];
short A[1001], durotan;
bool viz[1001];
int N, M, X, nt, nc, rad;
int st[1001];
bool ap[1001];

void abilitati(int x)
{
    for(int i=1; i<=M; ++i) {
        A[i] += ab[x][i];
    }
}

void DFS (int nod)
{
    viz[nod] = 1;
    if (nod != rad) {
        abilitati(nod);
    }
    nt++;
    for (int i=0; i<(int) G[nod].size(); ++i){
        int x = G[nod][i];
        if (!viz[x]) DFS (x);
    }
}

int cmp(capetenie q, capetenie w)
{
    if (q.y > w.y) return 1;
    if (q.y == w.y) {
        int n1 = 0, n2 = 0;
        for(int i=1; i<=M; ++i)
            if (q.a[i] > w.a[i]) n1++;
            else if (q.a[i] < w.a[i]) n2++;
        if (n1 > n2) return 1;
    }
    return 0;
}

int main()
{
    freopen("warcraft.in", "r", stdin);
    freopen("warcraft.out","w", stdout);

    scanf("%d%d%d", &N, &M, &X);

    int x, y, k, z;

    for(int i=1; i<=N; ++i){
        scanf("%d%d%d", &x, &y, &k);
        G[y].push_back(x);

        if (y == 0) C[++nc].x = x;
        for(int j=1; j<=k; ++j){
            scanf("%d", &z);
            ab[x][z] = 1;
            if (y == 0) C[nc].a[z] = 1;
        }
    }

    printf("%d\n", nc);

    for(int i=1; i<=nc; ++i){
        rad = C[i].x;
        nt = 0;
        memset(A, 0, sizeof(A));
        DFS(rad);
        if (viz[X] && ! durotan) durotan = i;
        C[i].y = nt;
        for(int j=1; j<=M; ++j){
            if (!C[i].a[j])
                if (A[j] == 1) C[i].a[j] = 1;
        }
    }

    printf("%d\n", C[durotan].y);

    swap(C[0], C[durotan]);
    sort(C+1, C+nc+1, cmp);
    Durotan = C[0];
    memset(ap, 0, sizeof(ap));
    int i = 1;
    while(i < nc){
        if (!ap[i]) {
                if (Durotan.y > C[i].y) {
                    Durotan.y += C[i].y;
                    for(int j=1; j<=M; j++)
                        if (Durotan.a[j] < C[i].a[j]) Durotan.a[j] = 1;
                    ap[i] = 1;
                    i = 1;
                }
                else if (Durotan.y == C[i].y){
                    int n1=0, n2=0;
                    for(int j=1; j<=M; j++)
                        if (Durotan.a[j] < C[i].a[j]) n2++;
                        else if (Durotan.a[j] > C[i].a[j]) n1++;
                    if (n1 > n2) {
                            Durotan.y += C[i].y;
                            for(int j=1; j<=M; j++)
                                if (Durotan.a[j] < C[i].a[j]) Durotan.a[j] = 1;
                            ap[i] = 1;
                            i = 1;
                        }
                        else i++;
                }
                else i++;
        }
        else i++;
    }

    printf("%d\n", Durotan.y);

    return 0;
}
