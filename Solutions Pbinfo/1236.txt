/*
Solutie: Descompunere in factori primi
Optimizari: Se foloseste baza 10^4. In descompunerea in factori primi ne oprim cand
        numarul prim nu poate sa fie la puteri mai mari de 1 =>
        x-ul ramas este prim
Puncte : 100
*/

#include <cstdio>
#include <algorithm>

using namespace std;

#define BASE 10000
#define MAX 200000
#define MAXLEN 200010
#define MAXN 200010

int Ans[MAXLEN], A[MAXN], Nr[MAXN];
int Ok[MAXN];
int N, nr;

void Multiply(int A[], int factor)
{
    int i, t = 0;
    for (i = 1; i <= A[0] || t; ++i, t /= BASE)
        A[i] = (t += A[i] * factor) % BASE;
    A[0] = i - 1;
}

void ciur(int n)
{
    nr = 0;
    for (int i = 2; i <= n; ++i){
        if (Ok[i]) continue;
        A[++nr] = i;
        for (int j = 2 * i; j <= n; j += i)
            Ok[j] = true;
    }
}

int main()
{
    freopen("pastile.in","r",stdin);
    freopen("pastile.out","w",stdout);

    scanf("%d", &N);

    ciur(2 * N);

    for (int i = N + 2; i <= 2 * N; ++i){
        int x = i;
        for (int j = 1; A[j] * A[j] <= x; ++j)
            while (!(x % A[j])){
                x /= A[j];
                ++Nr[j];
            }
        if (x != 1){
            x = lower_bound(A+1, A+nr+1, x) - A; //cautare binara
            ++Nr[x];
        }
    }

    for (int i = 2; i <= N; ++i){
        int x = i;
        for (int j = 1; A[j] * A[j] <= x; ++j)
            while (!(x % A[j])){
                x /= A[j];
                --Nr[j];
            }
        if (x != 1){
            x = lower_bound(A+1, A+nr+1, x) - A; //cautare binara
            --Nr[x];
        }
    }

    Ans[0] = Ans[1] = 1;
    int x, i;
    i = 1; x = 1;
    while (true){
        while (i <= nr && Nr[i] == 0)
            ++i;
        if (i > nr) break;
        --Nr[i];
        if (x > MAX / A[i]){
            Multiply(Ans, x);
            x = A[i];
        }
        else
            x *= A[i];
    }
    Multiply(Ans, x);

    printf("%d", Ans[Ans[0]]);
    for (int i = Ans[0] - 1; i >= 1; --i)
        printf("%.4d", Ans[i]);
    printf("\n");

    return 0;
}
