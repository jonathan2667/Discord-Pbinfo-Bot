// implementare: Cristi Dospra
// punctaj: 100p
// complexitate: O( K * log N )

#include <fstream>
#include <algorithm>
using namespace std;

#define NMAX 100002
#define inf 1e12
#define L(x) ((x) << 1)
#define R(x) ((x) << 1) + 1

ifstream fin("gard.in");
ofstream fout("gard.out");

struct Interv {
    int x, y, c;
}v[NMAX];

long long Aint[4 * NMAX], Lazy[4 * NMAX];

bool cmp(Interv A, Interv B) {

    if (A.y == B.y)
        return A.x < B.x;

    return A.y < B.y;
}

void Build(int nod, int st, int dr) {

    if (st == dr) {
        Aint[nod] = Lazy[nod] = inf;
        return;
    }

    int mid = (st + dr) >> 1;

    Build(L(nod), st, mid);
    Build(R(nod), mid+1, dr);

    Aint[nod] = Lazy[nod] = inf;

}

long long Query(int nod, int st, int dr, int a, int b) {

    if (a < 1)
        return 0;

    if (Lazy[nod] != inf) {
        Aint[nod] = min (Aint[nod], Lazy[nod]);

        if (st != dr) {
            Lazy[L(nod)] = min(Lazy[L(nod)], Lazy[nod]);
            Lazy[R(nod)] = min(Lazy[R(nod)], Lazy[nod]);
        }
        Lazy[nod] = inf;
    }

    if (a <= st && dr <= b)
        return Aint[nod];

    int mid = (st + dr) >> 1;
    long long t1 = inf, t2 = inf;

    if (a <= mid)
        t1 = Query(L(nod), st, mid, a, b);
    if (b > mid)
        t2 = Query(R(nod), mid+1, dr, a, b);

    return min ( t1, t2 );

}

void Update(int nod, int st, int dr, int a, int b, long long val) {

    if (Lazy[nod] != inf) {
        Aint[nod] = min(Aint[nod], Lazy[nod]);
        
        if (st != dr) {
            Lazy[L(nod)] = min(Lazy[L(nod)], Lazy[nod]);
            Lazy[R(nod)] = min(Lazy[R(nod)], Lazy[nod]);
        }
        Lazy[nod] = inf;
    }

    if (a <= st && dr <= b) {
        Aint[nod] = min(Aint[nod], val);
        
        if (st != dr) {
            Lazy[L(nod)] = min (Lazy[L(nod)], val);
            Lazy[R(nod)] = min (Lazy[R(nod)], val);
        }
        
        return;
    }

    int mid = (st + dr) >> 1;

    if (a <= mid)
        Update(L(nod), st, mid, a, b, val);
    if (b > mid)
        Update (R(nod), mid+1, dr, a, b, val);

    Aint[nod] = min(Aint[L(nod)], Aint[R(nod)]);
}

int main(){

    int N, K;

    fin >> N >> K;

    Build(1, 1, N);

    for (int i = 1; i <= K; ++i)
        fin >> v[i].x >> v[i].y >> v[i].c;

    sort(v + 1, v + K + 1, cmp);

    long long aux;

    for (int i = 1; i <= K; ++i) {
        int x = v[i].x;
        int y = v[i].y;
        
        aux = Query(1, 1, N, x-1, x-1);
        Update(1, 1, N, x, y, aux + v[i].c);
    }

    fout << Query(1, 1, N, N, N);

    return 0;
}
