/* Mihail Cosmin Pit-Rada
    O(m)
*/
#include<fstream>
using namespace std;
ifstream  fin("centura.in");
ofstream fout("centura.out");

int n, m, k, poz[10002], b[10002], s[10002];
char ch;

int main(){
    fin>>n>>m>>k;
    int i,j;
    j=0;
    for(i=1;i<=n;i++){
        fin>>ch;    if(ch=='A') poz[++j]=i;
        ///in poz[] se pastreaza pozitiile autoturismelor relativ la sirul citit
    }
    poz[m+1]=n+1; ///am introdus un autoturism fictiv la pozitia n+1

    ///b[i]=numarul minim de autoturisme dintre 1...i care trebuie deviate pe centura
    ///s[i]-s[i-1]=numarul de variante de dirijare care respecta restrictia R utilizand 1...i
    ///in prima etapa analizez calculez prefixul care contine cel mult k camioane
    b[0]=0;
    s[0]=1;
    for(i=1;i<=m+1 && poz[i]-i<=k;i++){
        s[i]=(s[i-1]*2);
        b[i]=1;
    }
    ///continuam calculul si pentru restul sirului
    ///b[i] si s[i] vor fi influentate doar de "istoria" data de secventa cu ultimele cel mult k camioane
    ///s[i-1]-s[j-1] reprezinta numarul solutiilor valabile pentru pozitia i si care trebuie adaugate la s[i-1]
    ///s[i]=s[i-1]+(s[i-1]-s[j-1]);
    j=0;
    for(;i<=m+1;i++){
        while(poz[i]-poz[j]-i+j>k) j++;
        ///am actualizat secventa maximala delimitata la dreapta de autoturismul i si care contine cel mult k
        ///camioane; secventa este cuprinsa intre autoturimele j si i, inclusiv
        ///pentru ca intreaga secventa 1...i sa respecte restrictia R trebuie sa mai utilizam inca b[j] autoturisme
        s[i]=(s[i-1]*2-s[j-1]);
        b[i]=1+b[j];
    }
    fout<<(s[m+1]-s[m])<<" "<<b[m+1]-1;///am scazut autoturismul fictiv de la pozitia n+1
    fout.close();
    fin.close();
    return 0;
}
