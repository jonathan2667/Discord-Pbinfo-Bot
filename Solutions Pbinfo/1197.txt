// prof. Eugen Nodea

# include <fstream>
# include <cstring>
using namespace std;

ifstream f("robotics.in");
ofstream g("robotics.out");
struct patrat
{
    short x, y;
}R1[2001], R2[2001];
struct traiectorie
{
    short x1,x2,y1,y2;
}r1[2001], r2[2001];
int n, m, t, i, j, tip, cant, x, y, n1, n2;
bool a[1000][1000];
int nr[1001];

inline int abs(int a)
{
    if (a < 0) return -a;
    return a;
}
bool cmp1(patrat a, patrat b)
{
    if (a.x == b.x) return (a.y < b.y);
    return (a.x < b.x);
}
bool cmp2(patrat a, patrat b)
{
    if (a.y == b.y) return (a.x < b.x);
    return (a.y < b.y);
}
bool verif(int t)
{
    int i, j, k, l, c, x, y, Max = 0, d1, d2, x1, x2, y1, y2;

    for(i=1; i<=n1; ++i)
    {
        x = R1[i].x; y = R1[i].y;
        d1 = (x - t > 0) ? 0 : abs(x - t) + 1;
        d2 = (y + t <= n)? 0 : (y + t) - n;
        Max = max(d1, d2);
        x1 = x - (t - Max); y1 = y + (t - Max);
        d1 = (x + t <= n)? 0 : (x + t) - n;
        d2 = (y - t > 0) ? 0 : abs(y - t) + 1;
        Max = max(d1, d2);
        x2 = x + (t - Max);  y2 = y - (t - Max);
        r1[i].x1 = x1 + y1; r1[i].y1 = x1 - y1;
        r1[i].x2 = x2 + y2; r1[i].y2 = x2 - y2;
    }

    for(i=1; i<=n2; ++i)
    {
        x = R2[i].x; y = R2[i].y;
        d1 = (x + t <= n)? 0 : (x + t) - n;
        d2 = (y + t <= n)? 0 : (y + t) - n;
        Max = max(d1, d2);
        x2 = x + (t - Max); y2 = y + (t - Max);
        d1 = (x - t > 0) ? 0 : abs(x - t) + 1;
        d2 = (y - t > 0) ? 0 : abs(y - t) + 1;
        Max = max(d1, d2);
        x1 = x - (t - Max);  y1 = y - (t - Max);
        r2[i].x1 = x1 + y1; r2[i].y1 = x1 - y1;
        r2[i].x2 = x2 + y2; r2[i].y2 = x2 - y2;
    }

    memset( a, 0, sizeof(a));
    memset(nr, 0, sizeof(nr));

    for(i=1; i<=n1; i++)
    {
        k = 0; // primul tip de intersectie
        if ((R1[i].x + R1[i].y) % 2 == 0)
            for(j=1; j<=n2; j++)
            {
                if ((R2[j].x + R2[j].y) % 2 == 0)
                    if (r2[j].x1 <= r1[i].x1 && r1[i].x1 <= r2[j].x2)
                        if (r1[i].y1 <= r2[j].y1 && r2[j].y1 <= r1[i].y2)
                            nr[++k] = j;
            }
        else
            for(j=1; j<=n2; j++) // al doilea tip de intersectie
            {
                if ((R2[j].x + R2[j].y) % 2 == 1)
                    if (r2[j].x1 <= r1[i].x1 && r1[i].x1 <= r2[j].x2)
                        if (r1[i].y1 <= r2[j].y1 && r2[j].y1 <= r1[i].y2)
                            nr[++k] = j;
            }
        for(l=1; l<k; ++l)
            for(c=l+1; c<=k; ++c)
                if (a[nr[l]][nr[c]]) return 1;
                else a[nr[l]][nr[c]] = a[nr[c]][nr[l]] = 1;
    }
    return 0;
}
int main()
{
    f >> n >> m >> t;
    for(i=1; i<=m; ++i)
    {
        f >> x >> y >> tip;
        ++cant;
        if (tip == 1)
        {
            cant += min(t, min(x-1, n-y));
            cant += min(t, min(n-x, y-1));
            R1[++n1].x = x; R1[n1].y = y;
        }
        else
        {
            cant += min(t, min(x-1, y-1));
            cant += min(t, min(n-x, n-y));
            R2[++n2].x = x; R2[n2].y = y;
        }
    }
    g << cant << "\n";

    //b)
    i = 1; j = n;
    while (i <= j)
    {
        t = (i+j) / 2;
        if (verif(t)) j = t - 1;
                 else i = t + 1;
    }
    if ( i <= n) g << i << "\n";
            else g << "0\n";
    return 0;
}
