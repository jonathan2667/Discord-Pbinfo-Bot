#include <iostream>
#include <fstream>
#define MAX 50000
using namespace std;

ifstream fin("inequation.in");
ofstream fout("inequation.out");

typedef int Huge;

void Adunare(Huge a[], Huge b[])
{
    if(b[0]>a[0])
        a[0]=b[0];

    int T=0;

    for(int i=1; i<=a[0]; i++)
    {
        a[i]+=b[i]+T;
        T=a[i]/10;
        a[i]%=10;
    }

    if(T)
        a[++a[0]]=T;
}

void Inmultire(Huge a[], int b)
{
    int T=0;

    for(int i=1; i<=a[0]; i++)
    {
        a[i]=a[i]*b+T;
        T=a[i]/10;
        a[i]%=10;
    }

    while(T)
        a[++a[0]]=T%10, T/=10;
}

bool comp(Huge a[], Huge b[])
{
    if(a[0]<b[0])
        return true;

    if(a[0]>b[0])
        return false;

    int IND=a[0];

    while(a[IND]==b[IND]&&IND>1)
        IND--;

    if(a[IND]>b[IND])
        return false;

    return true;
}

int query(int baza, Huge Y[])
{
    int nn=0;
    bool found=false;

    Huge R[MAX] {0};
    R[0]=R[1]=1;

    for(int j=1; j<=MAX&&!found; j++)
    {
        Inmultire(R,baza);

        if(comp(R,Y))
            nn++;
        else
            found=true;
    }

    return nn;
}

int main()
{
    int t;
    fin >> t;

    for(int i=1; i<=t; i++)
    {
        int b;
        fin >> b;

        Huge V[MAX] {0};
        char c[MAX];

        fin >> V[0] >> c;

        for(int i=0; i<V[0]; i++)
            V[i+1]=c[V[0]-i-1]-'0';

        int A[MAX] {0}, bb=b-1;
        A[0]=1, A[1]=1;

        Inmultire(V,bb);
        Adunare(V,A);

        fout << query(b,V) << "\n";
    }

    return 0;
}
