//Code by Patcas Csaba

//Time complexity: O(q * m)

//Space complexity: O(n + m)

//Method: Ad hoc

//Implementation time:  7 minutes



#include <vector>

#include <string> 

#include <set> 

#include <map> 

#include <queue> 

#include <bitset> 

#include <stack>

#include <list>



#include <numeric> 

#include <algorithm> 



#include <cstdio>

#include <fstream>

#include <iostream> 

#include <sstream> 

#include <iomanip>



#include <cctype>

#include <cmath> 

#include <ctime>

#include <cassert>



using namespace std;



#define LL long long

#define PII pair <int, int>

#define VB vector <bool>

#define VI vector <int>

#define VD vector <double>

#define VS vector <string>

#define VPII vector <pair <int, int> >

#define VVI vector < VI >

#define VVB vector < VB >



#define FORN(i, n) for(int i = 0; i < (n); ++i)

#define FOR(i, a, b) for(int i = (a); i <= (b); ++i)

#define FORD(i, a, b) for(int i = (a); i >= (b); --i)

#define FORI(it, X) for(__typeof((X).begin()) it = (X).begin(); it !=(X).end(); ++it) 

#define REPEAT do{ 

#define UNTIL(x) }while(!(x)); 



#define SZ size()

#define BG begin() 

#define EN end() 

#define CL clear()

#define X first

#define Y second

#define RS resize

#define PB push_back

#define MP make_pair

#define ALL(x) x.begin(), x.end()



#define IN_FILE "copii.in"

#define OUT_FILE "copii.out"



ifstream fin(IN_FILE);

ofstream fout(OUT_FILE);



int n, m, q;

VI a;

vector <PII> updates;



int main()

{

    //Read data

    fin >> n;

    a.RS(n + 1);

    FOR(i, 1, n) fin >> a[i];

    fin >> m;

    updates.RS(m + 1);

    FOR(i, 1, m)

    {

        int x, y;

        fin >> x >> y;

        updates[i] = MP(x, y);

    }

    fin >> q;

    FORN(i, q)

    {

        int p;

        fin >> p;

        FORD(j, m, 1)

        {

            int x = updates[j].X, y = updates[j].Y;

            if (x <= p && p <= y) p = x + (y - p);

        }

        fout << a[p] << endl;

    }

    fin.close();



    //Solve



    //Write data

    fout.close();



    return 0;

}