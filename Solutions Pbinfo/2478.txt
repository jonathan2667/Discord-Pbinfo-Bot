#include <bits/stdc++.h>

using namespace std;

ifstream fin ("laser.in");
ofstream fout ("laser.out");

typedef long long ll;
const int Nmax = 5005;
const ll inf = 1e18;

int x, y, i, j, n, cost;
ll dp[Nmax], ans;

struct point
{
    int x, y;
} A, B;

bool cmp(point A, point B) /// sortare antitrigonometrica
{
    if(!A.y && !B.y) return A.x < B.x;
    if(!A.y) return A.x < 0;
    if(!B.y) return B.x > 0;
    return (ll) A.x * B.y < (ll) A.y * B.x;
}

bool cmp2(point A, point B)
{
    if(!A.y && !B.y) return (ll) A.x * B.x > 0;
    if(!A.y) return A.x < 0;
    if(!B.y) return B.x > 0;
    return (ll) A.x * B.y <= (ll) A.y * B.x;
}

struct segment
{
    point start, finish; int w;
} a[Nmax];

int main()
{
    fin >> n;
    for(i=1; i<=n; ++i)
    {
        fin >> A.x >> A.y >> B.x >> B.y >> cost;
        if(cmp(B, A)) swap(A, B);
        a[i] = {A, B, cost};
    }

    for(i=1; i<=n; ++i)
        for(j=i+1; j<=n; ++j)
            if(cmp(a[j].start, a[i].start)) swap(a[i], a[j]);

    for(i=1; i<=n; ++i)
        if(a[i].start.x < 0 && a[i].start.y == 0) dp[i] = a[i].w; /// plec din cadranul 2, de pe axa Ox
            else
            {
                dp[i] = inf;
                for(j=1; j<i; ++j)
                    if(cmp2(a[i].start, a[j].finish))
                        dp[i] = min(dp[i], dp[j] + a[i].w);
            }

    ans = inf;
    for(i=1; i<=n; ++i)
        if(a[i].finish.x >  0 && a[i].finish.y == 0) ans = min(ans, dp[i]); /// termin in cadranul 1, pe axa Ox
    fout << (ans < inf ? ans : -1) << '\n';

    return 0;
}
