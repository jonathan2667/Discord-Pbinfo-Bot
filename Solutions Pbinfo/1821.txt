#include <iostream>
#include<fstream>
#include <cmath>

using namespace std;
ifstream f("treasurehunt.in");
ofstream g("treasurehunt.out");
double maxi,b[10001],efort,dist,ef,d;
struct puncte{int x,y,h,p;}
v[10001];
long a[10001], punct[10001],urm[10001],n,m,p,i,j,maxp,maxt,u,s,ok, z;
void distanta(puncte a, puncte b, double &dist , double &ef)
{
    dist=floor(sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y))*100)/100;
    if(b.h>=a.h)
        ef=floor((dist+dist*(b.h-a.h)/10)*100)/100;
    else
        ef=floor((dist+dist*(a.h-b.h)/50)*100)/100;
}
void afis(int x)
{
    g<<maxt<<endl;
    while (x!=0)
    {
        g<<x<<" ";//cout<<x<<endl;
        x=urm[x];
    }
}
int main()
{
    f>>z;
    f>>n>>m>>d;
    maxi=0;
    efort=0;f>>v[1].x>>v[1].y>>v[1].h>>v[1].p;
    for(i=2;i<=n;i++)
    {
        f>>v[i].x>>v[i].y>>v[i].h>>v[i].p;
        distanta(v[i-1],v[i],dist,ef);
        if(dist>maxi)
            maxi=dist;
        efort+=ef;
        b[i]=dist;
    }
    if(z==1)
        g<<maxi<<endl<<efort;
    else
    {
        maxt=v[n-1].p;
        punct[n]=0;
        a[n]=0;
        punct[n-1]=v[n-1].p;
        a[n-1]=1;
        urm[n-1]=n;
        for(i=n-2;i>=2;i--)
        {
            maxp=0;ok=0;s=0;urm[i]=n;
            for(j=i+1;j<n;j++)
            { 
                if(!ok)
                {
                    s+=b[j];
                    if(s>=d)
                        ok=1;
                }
                if(a[j]<m && punct[j]>maxp && ok)
                {
                    maxp=punct[j];
                    urm[i]=j;
                    a[i]=a[j]+1;
                }
            }
            punct[i]=maxp+v[i].p;
            if(punct[i]>maxt)
            {
                maxt=punct[i];
                u=i;
            }
        }
        punct[1]=maxt;urm[1]=u;a[1]=a[u];
        afis(1);
    }
    return 0;
}
