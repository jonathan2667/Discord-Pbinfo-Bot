#include <fstream>
#define ML 801
#define MC 801
using namespace std;
short int p[5][MC],lc[MC],lu[MC];
int m,n,np;
ifstream f("cristale.in");
ofstream g("cristale.out");


int f1(int li, int co)
{ int cp,cf;
   cp=p[li][co];
   cf=p[li][co-1];
    if((cp==p[li][co+1])&&
        (cp==p[li+1][co+1])&&
        (cp!=cf)&&
        (cf==p[li-1][co])&&
        (cf==p[li-1][co+1])&&
        (cf==p[li][co+2])&&
        (cf==p[li+1][co+2])&&
        (cf==p[li+2][co+1])&&
        (cf==p[li+1][co]) )
    {
        p[li][co]=p[li][co+1]=p[li+1][co+1]=cf;
        return 1;
    }
    return 0;
}
int f2(int li, int co)
{ int cp,cf;
   cp=p[li][co];
   cf=p[li][co-1];
    if((cp==p[li][co+1])&&
        (cp==p[li+1][co])&&
        (cp!=cf)&&
        (cf==p[li-1][co])&&
        (cf==p[li-1][co+1])&&
        (cf==p[li][co+2])&&
        (cf==p[li+1][co+1])&&
        (cf==p[li+2][co])&&
        (cf==p[li+1][co-1]))
    {
        p[li][co]=p[li][co+1]=p[li+1][co]=cf;
        return 1;
    }
    return 0;
}
int f3(int li, int co)
{ int cp,cf;
   cp=p[li][co];
   cf=p[li][co-1];
    if((cp==p[li+1][co+1])&&
        (cp==p[li+1][co])&&
        (cp!=cf)&&
        (cf==p[li-1][co])&&
        (cf==p[li][co+1])&&
        (cf==p[li+1][co+2])&&
        (cf==p[li+2][co+1])&&
        (cf==p[li+2][co])&&
        (cf==p[li+1][co-1]))
    {
        p[li][co]=p[li+1][co+1]=p[li+1][co]=cf;
        return 1;
    }
    return 0;
}
int f4(int li, int co)
{ int cp,cf;
   cp=p[li][co];
   cf=p[li][co-1];
    if((cp==p[li+1][co])&&
        (cp==p[li+1][co-1])&&
        (cp!=cf)&&
        (cf==p[li-1][co])&&
        (cf==p[li][co+1])&&
        (cf==p[li+1][co+1])&&
        (cf==p[li+2][co])&&
        (cf==p[li+2][co-1])&&
        (cf==p[li+1][co-2]))
    {
        p[li][co]=p[li+1][co]=p[li+1][co-1]=cf;
        return 1;
    }
    return 0;
}
void afis4_linii()
{  int i,j;
    for(i=2;i<=2;i++)
        {   g<<'\n';//fprintf(g,"\n");
            for(j=1;j<=n-1;j++)
                g<<p[i][j]<<' ';//fprintf(g,"%d ",p[i][j]);

            g<<p[i][n];//fprintf(g,"%d",p[i][n]);
        }

}

void copiere_linii_peste_cele_vechi()
{ int j;
    for(j=1;j<=n;j++)
    {
        p[1][j]=p[2][j];
        p[2][j]=p[3][j];
        p[3][j]=p[4][j];
    }
}

int main()
{
    int i,j,idf,k,c;

    f>>c>>m>>n;
    for(i=1;i<=4;i++)
        for(j=1;j<=n;j++)
            f>>p[i][j];


    int nr_linii=3;
    if(c==2)
    {for(j=1;j<=n-1;j++)
        g<<p[1][j]<<' ';
    g<<p[1][n];
    }
    do
    {
      i=2;
    for (k=2;k<=n-1;k++) lu[k]=1;
    {
        for (k=2;k<=n-1;k++)
        {
            lc[k]=lu[k];
            lu[k]=1;
        }
        for(j=2;j<=n-1;j++)
        {
            if(lc[j])
            {
                idf=1;
                if(idf&&(j<n-1)&&f1(i,j))
                {
                    np++;
                    lu[j]=lu[j+1]=lu[j+2]=0;
                    j+=2;
                    idf=0;
                }
                if(idf&&(j<n-1)&&f2(i,j))
                {
                    np++;idf=0;
                    lu[j-1]=lu[j]=lu[j+1]=0;
                    j+=2;
                }
                if(idf&&(j<n-1)&&f3(i,j))
                {
                    np++;idf=0;
                    lu[j-1]=lu[j]=lu[j+1]=lu[j+2]=0;
                    j+=1;
                }
                if(idf&&(j>2)&&f4(i,j))
                {
                    np++;idf=0;
                    lu[j-2]=lu[j-1]=lu[j]=lu[j+1]=0;
                    j+=1;
                }
            }
        }
    }
    if(c==2)
    afis4_linii();
    copiere_linii_peste_cele_vechi();
    for(j=1;j<=n;j++)
        f>>p[4][j];
    nr_linii++;
    i=1;
    } while(nr_linii<m);
    if(c==2)
    {
        for(i=2;i<=3;i++)
        {   g<<'\n';
            for(j=1;j<=n-1;j++)
                g<<p[i][j]<<' ';
            g<<p[i][n];
        }
        g<<'\n';
    }
    else
        if(c==1)
            g<<np<<'\n';
    return 0;
}
