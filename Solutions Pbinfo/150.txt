//Autor: Vlad Stoian
//O(N^3) - 100 puncte

#include <cstdio>
#include <list>
#include <map>
#define NMAX 1006


using namespace std;

struct pos_str {int x; int y;};
struct move_str {char which; int number; int times;};

int a[NMAX][NMAX];
pos_str b[NMAX * NMAX];

char output_stream[22000000];
int output_ind = 0;

int n = 0;

int moves_count = 0;

multimap<int, pos_str> zeroes;


void add_zero(int i, int j)
{
    int key = i * n + j;
    pos_str aux;
    aux.x = i;
    aux.y = j;
    zeroes.insert(make_pair(key, aux));
}


void remove_zero(int i, int j)
{
    int key = i * n + j;
    zeroes.erase(key);
}

void update_zero(int from_i, int from_j, int to_i, int to_j)
{
    remove_zero(from_i, from_j);
    add_zero(to_i, to_j);
}

void add_move(char which, int number, int times)
{
    //sprintf(buff, "%c %d %d\n", which, number, times);
    //moves_str += buff;
    //moves_str << which << ' ' << number << ' ' << times << endl;

    output_stream[output_ind++] = which;
    output_stream[output_ind++] = ' ';
//    if (number >= 100)
    {
        output_stream[output_ind++] = (number / 100) + '0';
        number %= 100;
    }
//    if (number >= 10)
    {
        output_stream[output_ind++] = (number / 10) + '0';
        number %= 10;
    }
//    if (number >= 0)
    {
        output_stream[output_ind++] = (number) + '0';
    }

    output_stream[output_ind++] = ' ';

//    if (times >= 100)
    {
        output_stream[output_ind++] = (times / 100) + '0';
        times %= 100;
    }
//    if (times >= 10)
    {
        output_stream[output_ind++] = (times / 10) + '0';
        times %= 10;
    }
//    if (times >= 0)
    {
        output_stream[output_ind++] = (times) + '0';
    }
    output_stream[output_ind++] = '\n';

    moves_count ++;
}

void swap_two(int val, pos_str one, pos_str two)
{

    if (val == 0)
    {
        update_zero(one.x, one.y, two.x, two.y);
    }
    else
    {
        b[val] = two;
    }
    a[two.x][two.y] = val;

}

void swap_values(pos_str x, pos_str y, pos_str z)
{
    int val_x = a[x.x][x.y];
    int val_y = a[y.x][y.y];
    int val_z = a[z.x][z.y];

    swap_two(val_x, x, y);

    swap_two(val_y, y, z);

    swap_two(val_z, z, x);

}


void move_piece_from_to(int from_i, int from_j, int to_i, int to_j)
{
    pos_str d, e, f;
    d.x = from_i;
    d.y = from_j;
    e.x = to_i;
    e.y = to_j;

    if (from_i == to_i)
    {
        add_move('L', to_i, n + 2 - from_j + to_j);
        add_move('C', to_j, n + 1);
        add_move('L', to_i, from_j - to_j);
        add_move('C', to_j, 1);

        //print_moves();        

        f.x = (to_i + 1) % (n + 2);
        f.y = to_j;

    }
    else
    if (from_j == to_j)
    {
        add_move('L', from_i, n + 1);
        add_move('C', to_j, from_i - to_i);
        add_move('L', from_i, 1);
        add_move('C', to_j, n + 2 - from_i + to_i);

        //print_moves();        

        f.x = from_i;
        f.y = (from_j + 1) % (n + 2);

    }
    else
    {
        add_move('C', to_j, from_i - to_i);
        add_move('L', from_i, (to_j > from_j) ? (to_j - from_j) : (n + 2 - from_j + to_j));
        add_move('C', to_j, n + 2 - from_i + to_i);
        add_move('L', from_i, (to_j < from_j) ? (from_j - to_j) : (n + 2 - to_j + from_j));

        //print_moves();

        f.x = from_i;
        f.y = to_j;

    }

    swap_values(d, e, f);
}


void move_zero_to(int i, int j)
{
    multimap<int, pos_str>::iterator it = zeroes.begin();
    move_piece_from_to(it->second.x, it->second.y, i, j);
}

void za_read()
{
    FILE *fin = fopen("shift1.in", "rb");
    fscanf(fin, "%d\n", &n);
    //setvbuf(fin, NULL, _IOFBF, 102400);


    for (int i = 0; i < n + 2; i++)
    {
        for (int j = 0; j < n + 2; j++)
        {
            int aux = 0;
            fscanf(fin, "%d", &aux);

            a[i][j] = aux;

            b[aux].x = i;
            b[aux].y = j;

            if (aux == 0)
            {
                add_zero(i, j);
            }
        }
    }

    fclose(fin);

}

void za_write()
{
    FILE *fout = fopen("shift1.out", "wb");
    output_stream[output_ind] = 0;
    fprintf(fout, "%d\n", moves_count);
    fprintf(fout, "%s", output_stream);
    fclose(fout);
}

int main()
{
    

    za_read();

    for (int i = 0; i < n + 2; i++)
    {
        for(int j = 0; j < n + 2; j++)
        {
            //daca e prima sau ultima linie/coloana
            if ((i==0) || (j==0) || (i==n+1) || (j==n+1))
            {
                if (a[i][j] != 0)
                {
                    move_zero_to(i,j);
                }
                remove_zero(i, j);
                continue;
            }

            int should_be = (i - 1) * n + j;

            if (a[i][j] != should_be)
            {
                move_piece_from_to(b[should_be].x, b[should_be].y, i, j);
            }
        }
    }

    za_write();

    return 0;
}
