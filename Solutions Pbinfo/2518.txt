// Solutie optimizata
// Propusa de: elev Vintila Valentin (100p)

#include <fstream>
#include <cmath>

using namespace std;

int main()
{
    long i, j, d;
    int v[11] = {};

    long k, p, n; ifstream fin("goe.in");
    fin >> k >> p >> n; fin.close();


    ofstream fout("goe.out");

    // Primele 40 de puncte (cerinta a):
    long nrn = 0;

    // Goe scrie 5 sau 0 numere intr-una din zile.
    // Este suficient sa verificam daca in componenta indicelui
    // zilei respective apare una din cifrele 2, 4, 5, 7.
    // Rezultatul final este de 5 ori mai mare.

    for(i = 1; i <= k; ++i)
    {
        for(j = i - 1; j; j /= 10)
            if(j % 10 == 2 || j % 10 == 4 || j % 10 == 5 || j % 10 == 7)
                break;
        if(j == 0) nrn += 5;
    }
    (fout << nrn).put('\n');


    // Urmatoarele 30 de puncte (cerinta b):

    nrn = 1; d = 3; // d = nr de palindroame de nrn cifre
    while(p > d) { p -= d; ++nrn;
                   if(nrn % 2) d *= 4; }

    // d este modificat o data la 2 pasi, intrucat numarul de
    // palindroame este acelasi pentru o lungime de 2*k si 2*k+1

    // p retine al catelea numar de nrn cifre trebuie determinat.
    // In c construim palindromul, dar in baza 4, pentru a face o 
    // bijectie intre baza 4 si o baza cu cifrele 0,1,3,8 (singurele
    // cifre cu care se pot construi palindroamele)

    v[1] = i = 1; v[nrn] = 1; d /= 3; --p;
    while(d)
    {
        v[i] = v[nrn - i + 1] = v[i] + p / d;
        p %= d; d /= 4; ++i;
    }

    // Trecem numarul din baza 4 in scrierea necesara, afisandu-l
    // in acelasi timp (cod optimizat)

    for(i = 1; i <= nrn; ++i)
        fout << ((v[i] == 2) ? 3 : ((v[i] == 3) ? 8 : v[i]));
    fout.put('\n');


    // Ultimele 30 de puncte (cerinta c):

    i = nrn = log10(n) + 1;
    do { v[i] = n % 10; --i; } while(n /= 10);
    i = 1;

    if(v[1] == 1)
        do ++i; while(i <= nrn && v[i] == 0);

    if(i == nrn + 1)
        for(i = 1; i <= nrn; ++i) fout.put('9');
    else
    {
        fout.put('9');

        if(v[i] > 1 && i < nrn && v[i + 1] < 6 ||
           v[i] == 1 && v[i + 1] < 6 || v[i] != 9)
        {
            --v[i];
            if(v[i] == 2 || v[i] == 4 || v[i]== 5 || v[i] == 7) --v[i];
            if(v[i] == 4) v[i]=3;
        }

        for(++i; i <= nrn; ++i) v[i] = 9;
        --i; do
        {
            if(v[i] == 6) v[i] = 9;
            fout.put(v[i] + '0');
        } while(--i);
    }

    // Final: inchidem fisierul de iesire.

    fout.close();
    return 0;
}