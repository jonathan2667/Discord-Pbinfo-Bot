#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cassert>

using namespace std;

int main() {
    ifstream cin("taietura.in");
    ofstream cout("taietura.out");

    int N; assert(cin >> N);
    assert(1 <= N && N <= 200 * 1000);
    vector<int> V(N + 1, 0);

    for (int i = 1; i <= N; ++i) {
        assert(cin >> V[i]);
        assert(-1000 * 1000 * 1000 <= V[i] && V[i] <= 1000 * 1000 * 1000);
    }

    vector<int64_t> partial_sum(N + 1, 0);
    for (int i = 1; i <= N; ++i)
        partial_sum[i] = partial_sum[i - 1] + V[i];

    auto sums = partial_sum;
    sort(sums.begin(), sums.end());
    sums.erase(unique(sums.begin(), sums.end()), sums.end());

    vector<int64_t> mars(N + 1, 0);
    vector<int> count(sums.size(), 0);
    for (int i = 0; i <= N; ++i) {
        int sum_index = lower_bound(sums.begin(), sums.end(), partial_sum[i]) - sums.begin();
        int to_the_left = count[sum_index];
        if (i < N)
            mars[i + 1] -= to_the_left;
        ++count[sum_index];
    }

    for (int i = 0; i < N; ++i) {
        int sum_index = lower_bound(sums.begin(), sums.end(), partial_sum[i]) - sums.begin();
        --count[sum_index];
        int to_the_right = count[sum_index];
        mars[i + 1] += to_the_right;
    }

    int64_t answer = 0;
    for (int i = 1; i <= N; ++i) {
        answer += mars[i];
        cout << answer << " ";
    }
    cout << "\n";
} 