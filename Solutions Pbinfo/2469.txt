#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <queue>

using namespace std;

void dfs(int node, const vector< vector<int> > &edges, vector<bool>& used) {
    if (used[node])
        return;
    used[node] = true;
    for (auto &x : edges[node])
        dfs(x, edges, used);
}

int main() {
    ifstream cin("dungeon.in");
    ofstream cout("dungeon.out");

    int T; cin >> T;
    assert(1 <= T && T <= 5);
    while (T--) {
        int N; assert(cin >> N);
        assert(1 <= N && N <= 50000);
        vector< vector<int> > edges(2 * N);
        for (int i = 0; i < N - 1; ++i) {
            int x, y; assert(cin >> x >> y);
            assert(1 <= x && x <= N);
            assert(1 <= y && y <= N);
            assert(x != y);
            edges[x - 1].push_back(y - 1);
            edges[y - 1].push_back(x - 1);
        }

        for (int i = 0; i < N - 1; ++i) {
            int x, y; assert(cin >> x >> y);
            assert(N + 1 <= x && x <= N * 2);
            assert(N + 1 <= y && y <= N * 2);
            assert(x != y);
            edges[x - 1].push_back(y - 1);
            edges[y - 1].push_back(x - 1);
        }

        vector<bool> matched(2 * N, false);
        vector< vector<int> > matching(2 * N);

        for (int i = 0; i < N; ++i) {
            int x, y; assert(cin >> x >> y);
            if (x > y)
                swap(x, y);
            assert(1 <= x && x <= N);
            assert(N + 1 <= y && y <= 2 * N);
            --x; --y;
            matched[x] = true;
            matched[y] = true;
            matching[x].push_back(y);
            matching[y].push_back(x);
        }

        assert(matched == vector<bool>(2 * N, true));
        vector<bool> used(2 * N, false);
        dfs(0, edges, used);
        dfs(N, edges, used);
        assert(used == vector<bool>(2 * N, true));

        queue<int> Q;
        vector<int> degree(2 * N, 0);
        for (int i = 0; i < 2 * N; ++i) {
            degree[i] = edges[i].size();
            if (degree[i] == 1)
                Q.push(i);
        }

        while (!Q.empty()) {
            int node = Q.front();
            Q.pop();
            for (auto &x : edges[node]) {
                if (degree[x] > 0) {
                    matching[x].push_back(node);
                    matching[node].push_back(x);
                    degree[node] = 0;
                    degree[x] = 0;
                    for (auto &y : edges[x]) {
                        if (--degree[y] == 1)
                            Q.push(y);
                    }
                }
            }
        }

        bool ok = true;
        for (int i = 0; i < 2 * N; ++i)
            if (matching[i].size() != 2) {
                ok = false;
            }
        if (!ok) {
            cout << "-1\n";
            continue;
        }

        vector<int> answer;
        int node = 0;
        int last = -1;
        do {
            answer.push_back(node);
            for (int i = 0; i < 2; ++i)
                if (matching[node][i] != last) {
                    int next = matching[node][i];
                    last = node;
                    node = next;
                    break;
                }
        } while (node);
        if (int(answer.size()) != 2 * N) {
            cout << "-1\n";
            continue;
        }

        for (auto &x : answer)
            cout << x + 1 << " ";
        cout << "\n";
    }
} 