/*
    prof. Constantin Galatan
    Complexitate: O(N*M*K)
*/
#include <fstream>
using namespace std;

ifstream fin("para.in");
ofstream fout("para.out");

const  int Mod = 30011, MaxN = 101, MaxK = 101;
int N, M, K;
int a[MaxN][MaxN][MaxK];
// a[i][j][k] - nr de posibilitati de a plasa k caini intr-un dreptunghi avand i linii si j coloane

int main()
{
    fin >> N >> M >> K;

    for (int i = 0; i <= N; ++i)
        for (int j = 0; j <= M; ++j)
            a[i][j][0] = 1;

    for (int i = 1; i <= N; i++)
        for (int j = 1; j <= M; j++)
            for (int k = 1; k <= min(K, i * j); k++)
            {
                a[i][j][k] = a[i - 1][j][k];  // nu plasez caini pe linia i

                if ( i == N && j == M) // cazul special
                {
                    a[i][j][k] += (j - 1) * a[i - 1][j - 1][k - 1]; // pun un caine pe linia i care nu e "atacat" de un altul

                    if (i >= 2 && k >= 2)  // plasez un caine pe linia i care e "atacat" pe coloana
                        a[i][j][k] += (j - 1) * (i - 1) * a[i - 2][j - 1][k - 2];

                    if (j >= 2 && k >= 2 )  // plasez doi caini pe linia i
                        a[i][j][k] += ((j - 1) * (j - 2) / 2) * a[i - 1][j - 2][k - 2];
                }
                else // cazul general
                {
                    a[i][j][k] += j * a[i - 1][j - 1][k - 1]; // plasez un caine care nu e atacat de un altul

                    if (i >= 2 && k >= 2)
                        a[i][j][k] += j * (i - 1) * a[i - 2][j - 1][k - 2]; // plasez un caine pe linia i care e "atacat" pe coloana

                    if (j >= 2 && k >= 2)              // plasez doi caini pe linia i
                        a[i][j][k] += (j * (j - 1) / 2) * a[i - 1][j - 2][k - 2];
                }
                a[i][j][k] %= Mod;
            }

    fout << a[N][M][K];

    fin.close();
    fout.close();
}
