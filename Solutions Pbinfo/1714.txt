# include <fstream>
# include <queue>
# include <cassert>
using namespace std;

ifstream f("pandora.in");
ofstream g("pandora.out");

const int nM = 1013;
struct zona
{
    short l, c;
}P1, P2;

int dx[] = {0, 1, 0,-1};
int dy[] = {1, 0,-1, 0};

short h[nM][nM];
queue <zona> q;
int Nrmp, Nrs, k, N, M, p;
short l, c;
void fill( short i, short j )
{
    short K;
    h[i][j] = -h[i][j];
    if (i < P1.l) P1.l = i;
    if (j < P1.c) P1.c = j;
    if (i > P2.l) P2.l = i;
    if (j > P2.c) P2.c = j;
    for (K=0; K<4; ++K)
        {
            l = i + dx[K];
            c = j + dy[K];
            if (l > 0 && l <= N && c > 0 && c <= N)
                if (h[l][c] > 0)
                {
                    fill(l, c);
                }
        }
}
bool patrat(short x1, short y1, short x2, short y2)
{
    short i, j;
    int x = h[x1][y1];
    for(i=x1; i<=x2; ++i)
        for(j=y1; j<=y2; ++j)
            if(x != h[i][j]) return 0;
    return 1;
}
bool colturi(short x1, short y1, short x2, short y2)
{
    int x = -h[x1][y1];
    short l1 = x1 - 1, l2 = x2 + 1, c1 = y1 - 1, c2 = y2 + 1;
    short i;
    if (-h[l1][c1] >= x || -h[l1][c2] >= x || -h[l2][c1] >= x || -h[l2][c2] >= x) return 0;
    if (h[l1][c1] == 0 || h[l1][c2] == 0 || h[l2][c1] == 0 || h[l2][c2] == 0) return 0;

    for(i=x1; i<=x2; i++){
        if (-h[i][c1] != x) return 0;
        if (-h[i][c2] != x) return 0;
    }
    for(i=y1; i<=y2; i++){
        if (-h[l1][i] != x) return 0;
        if (-h[l2][i] != x) return 0;
    }
    return 1;
}
bool verif(zona P1, zona P2)
{
    short i, j, l, c;
    int x;
    for(i=P1.l; i<=P2.l; ++i)
        for(j=P1.c; j<=P2.c; ++j)
            if (h[i][j] < 0){
                if (patrat(i, j, i+k-3, j+k-3)){
                    if (colturi(i, j, i+k-3, j+k-3)){
                        g << i-1 << " " << j-1 << "\n";
                        return 1;
                    }
                }
            }
    return 0;
}
int main()
{
    int i, j, x, y, c, ok;

    ///f >> p;
    f >> N >> k >> M;
    p = 2;

    assert(N > 1 && N < 1001);
    assert(k > 1 && k < 400 && k < N);
    assert(M > 1 && M < 200001);

    i = 0;
    while(f >> x >> y >> c)
    {
        assert(x > 0 && x <= N);
        assert(y > 0 && y <= N);
        assert(c > 0 && c <= 1000);
        ++i;
        h[x][y] = c;
    }
    assert(i == M);

    for(i=1; i<=N; ++i)
        for(j=1; j<=N; ++j)
            if (h[i][j] > 0)
            {
                Nrmp++;
                P1.l = P2.l = i;
                P1.c = P2.c = j;
                fill(i, j);
                if (p == 2) ok = verif(P1, P2);
            }

    if (p == 1) g << Nrmp << "\n";

    return 0;
}
