#include <cstdio>
#define BIG 1000000000
using namespace std;
int v[1010],sol[1010],f[10];
int comb[1010][1010];
int calcul (int cf){
    int i,sol;
    sol=1;
    for (i=0;i<10;i++){
        if (!f[i])
            continue;
        if (comb[cf][f[i]]==-1 || (long long)sol*comb[cf][f[i]]>BIG)
            return -1;
        sol=(sol*comb[cf][f[i]]);
        cf-=f[i];

    }
    return sol;
}
int main()
{
    FILE *fin=fopen ("inrudit.in","r");
    FILE *fout=fopen ("inrudit.out","w");
    int k,n,i,j,rez,poz,val;
    char c;
    fscanf (fin,"%d\n",&k);
    c=fgetc (fin);
    n=0;
    while ('0'<=c && c<='9'){
        v[++n]=c-'0';
        c=fgetc (fin);
    }
    for (i=0;i<=1000;i++){
        comb[i][0]=comb[i][i]=1;
        for (j=1;j<i;j++){
            if (comb[i-1][j]==-1 || comb[i-1][j-1]==-1 || comb[i-1][j-1]+comb[i-1][j]>BIG)
                comb[i][j]=-1;
            else
                comb[i][j]=comb[i-1][j-1]+comb[i-1][j];
        }
    }
    poz=-1;
    for (i=n;i;i--){ /// vad ce prefix ramane la fel
        for (j=v[i]+1;j<10;j++){
            if (f[j]==0)
                continue;
            f[j]--;
            f[v[i]]++;
            rez=calcul(n-i);
            f[v[i]]--;
            if (rez<0 || rez>=k){
                poz=i;
                val=j;
                break; /// ramane sa faci sufixul de la poz+1
            }
            else {
                k-=rez;
                f[j]++;
            }

        }
        f[v[i]]++;
        if (j<10)
            break;
    }
    if (poz==-1){
        fprintf (fout,"-1");
        return 0;
    }
    for (i=1;i<poz;i++)
        sol[i]=v[i];
    sol[poz]=val;
    /// imi trebuie al k-lea sufix avand cifrele din f
    for (i=poz+1;i<=n;i++){
        for (j=0;j<10;j++){
            if (!f[j])
                continue;
            f[j]--;
            rez=calcul(n-i);
            if (rez<0 || rez>=k){
                val=j;
                break; /// ramane sa faci sufixul de la i+1
            }
            else {
                k-=rez;
                f[j]++;
            }
        }
        sol[i]=val;
    }
    for (i=1;i<=n;i++)
        fprintf (fout,"%d",sol[i]);
    return 0;
}
