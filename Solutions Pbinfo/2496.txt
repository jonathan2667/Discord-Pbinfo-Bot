/*
   Implementare Dan Pracsiu
*/

#include <bits/stdc++.h>
#define nmax 105
#define oo 1000000000
#define inFile  "road.in"
#define outFile "road.out"
using namespace std;

struct PQ
{
    int x, y, val;
    bool operator < (const PQ &e) const
    {
        return val > e.val;
    }
};

int a[nmax][nmax], d[nmax][nmax], v[10], n;
int nrMinCif, dMin;
int dx[] = {0, 0, -1, 1};
int dy[] = {1, -1, 0, 0};
priority_queue<PQ> q;

void Citire()
{
    int i, j;
    char s[nmax];
    ifstream fin(inFile);
    fin >> n;
    for (i = 0; i < 10; i++)
        fin >> v[i];
    for (i = 1; i <= n; i++)
    {
        fin >> (s + 1);
        for (j = 1; j <= n; j++)
            a[i][j] = s[j] - '0';
    }
    fin.close();
}

void Bordare()
{
    int i;
    for (i = 0; i <= n + 1; i++)
        a[0][i] = a[n + 1][i] = a[i][0] = a[i][n + 1] = -1;
}

void InitD()
{
    int i, j;
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            d[i][j] = oo;
}

int Lee(int V)
{
    PQ w;
    int i, j, x, y, k, M;
    InitD();
    for (i = 1; i <= n; i++)
        if (V & (1 << a[i][1]))
        {
            d[i][1] = v[a[i][1]];
            q.push({i, 1});
        }
    while (!q.empty())
    {
        i = q.top().x;
        j = q.top().y;
        q.pop();
        for (k = 0; k < 4; k++)
        {
            x = i + dx[k];
            y = j + dy[k];
            if (a[x][y] >= 0 && (V & (1<<a[x][y]))
                && d[x][y] > d[i][j] + v[a[x][y]])
            {
                w.x = x; w.y = y; w.val = d[i][j] + v[a[x][y]];
                d[x][y] = w.val;
                q.push(w);
            }
        }
    }
    M = oo;
    for (i = 1; i <= n; i++)
        M = min(M, d[i][n]);
    return M;
}

int NrCif(int n)
{
    int cnt = 0;
    while (n > 0)
    {
        cnt++;
        n = (n & (n - 1));
    }
    return cnt;
}

void Rezolvare()
{
    int V, D, c;
    nrMinCif = 10;
    dMin = oo;
    for (V = 1; V < 1024; V++)
    {
        c = NrCif(V);
        D = Lee(V);
        if (c < nrMinCif && D < oo)
        {
            nrMinCif = c;
            dMin = D;
        }
        else if (c == nrMinCif)
            dMin = min(dMin, D);
    }
    ofstream fout(outFile);
    fout << nrMinCif << "\n" << dMin << "\n";
    fout.close();
}

int main()
{
    Citire();
    Bordare();
    Rezolvare();
    return 0;
}
