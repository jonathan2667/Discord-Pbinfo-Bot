/**
 * Author: Andrei Heidelbacher
 * Task: Politic
 * Time complexity: O(N^2)
 * Space complexity: O(N^2)
 * Expected score: 100 points
 */

#include <fstream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

const char IN_FILE[] = "politic.in";
const char OUT_FILE[] = "politic.out";

typedef vector<vector<int>> Graph;

vector<set<int>> findCycles(const vector<int> &fathers) {
  const int size = int(fathers.size());
  vector<int> visited = vector<int>(size, -1);
  vector<set<int>> cycles;
  for (int u = 0; u < size; ++u) {
    if (visited[u] == -1) {
      int v = u;
      do {
        visited[v] = u;
        v = fathers[v];
      } while (visited[v] == -1);
      if (visited[v] == u) {
        set<int> cycle;
        const int firstOnCycle = v;
        do {
          cycle.insert(v);
          v = fathers[v];
        } while (v != firstOnCycle);
        cycles.push_back(cycle);
      }
    }
  }
  return cycles;
}

vector<int> solveTree(const Graph &tree, const int u) {
  vector<int> dp = vector<int>(2, 1);
  for (const int &v: tree[u]) {
    const vector<int> sonDp = solveTree(tree, v);
    vector<int> newDp = vector<int>(int(dp.size()) + int(sonDp.size()) - 1, 0);
    newDp[0] = 1;
    for (int i = 1; i < int(dp.size()); ++i)
      for (int j = 0; j < int(sonDp.size()); ++j)
        newDp[i + j] = max(newDp[i + j], dp[i] + sonDp[j]);
    dp = newDp;
  }
  return dp;
}

vector<int> mergeDp(const vector<int> &firstDp, const vector<int> &secondDp) {
  vector<int> newDp = vector<int>(int(firstDp.size()) + int(secondDp.size()) - 1, 0);
  for (int i = 0; i < int(firstDp.size()); ++i)
    for (int j = 0; j < int(secondDp.size()); ++j)
      newDp[i + j] = max(newDp[i + j], firstDp[i] + secondDp[j]);
  return newDp;
}

vector<int> solveCycle(const Graph &graph, const set<int> &cycle) {
  const int length = int(cycle.size());
  vector<int> dp = vector<int>(1, 0);
  for (const int &cycleNode: cycle)
    for (const int &root: graph[cycleNode])
      if (cycle.find(root) == cycle.end())
        dp = mergeDp(dp, solveTree(graph, root));
  vector<int> cycleDp = vector<int>(length + int(dp.size()));
  for (int i = 0; i < length; ++i)
    cycleDp[i] = i;
  for (int i = length; i < int(cycleDp.size()); ++i)
    cycleDp[i] = length + dp[i - length];
  return cycleDp;
}

vector<int> solveGraph(const vector<int> &fathers) {
  const int size = int(fathers.size());
  Graph graph = Graph(size);
  for (int u = 0; u < size; ++u)
    graph[fathers[u]].push_back(u);
  vector<set<int>> cycles = findCycles(fathers);
  vector<int> dp = vector<int>(1, 0);
  for (const set<int> &cycle: cycles)
    dp = mergeDp(dp, solveCycle(graph, cycle));
  return dp;
}

vector<int> readInput() {
  ifstream in(IN_FILE);
  int size;
  in >> size;
  vector<int> fathers = vector<int>(size);
  for (int u = 0; u < size; ++u) {
    in >> fathers[u];
    --fathers[u];
  }
  in.close();
  return fathers;
}

void writeOutput(const vector<int> &remaining) {
  ofstream out(OUT_FILE);
  for (int i = 1; i < int(remaining.size()); ++i)
    out << remaining[i] << "\n";
  out.close();
}

int main() {
  const vector<int> fathers = readInput();
  vector<int> remaining = solveGraph(fathers);
  for (int i = 0; i < int(remaining.size()); ++i)
    remaining[i] = int(fathers.size()) - remaining[i];
  writeOutput(remaining);
  return 0;
}
