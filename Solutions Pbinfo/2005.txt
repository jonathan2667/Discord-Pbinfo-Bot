// Popa Bogdan Ioan, clasa a 10-a Colegiul National Aurel Vlaicu Orastie
#include <bits/stdc++.h>

#define Nmax 15
#define ll long long

using namespace std;

ifstream fin("matching.in");
ofstream fout("matching.out");

string S1[Nmax], S2[Nmax];
int N;
ll dp[Nmax][(1 << Nmax) + 2];
bool F[Nmax][Nmax];
int i, j, k;

int cntBits(int X)
{
    int ret = 0;
    while(X)
    {
        ret++;
        X &= (X - 1);
    }
    return ret;
}

void makePrefix(string &N, vector <int> &pi)
{
    int i, k = -1;
    pi[0] = -1;
    for(i = 1; i < (int)N.size(); i++)
    {
        while(k != -1 && N[k + 1] != N[i])
            k = pi[k];
        if(N[k + 1] == N[i])
            k++;
        pi[i] = k;
    }
}

bool isSubsequence(string N, string M)
{
    vector <int> pi(N.size());
    makePrefix(N, pi);
    int k = -1, i;
    for(i = 0; i < (int)M.size(); i++)
    {
        while(k != -1 && N[k + 1] != M[i])
            k = pi[k];
        if(N[k + 1] == M[i])
            k++;
        if(k == (int)N.size() - 1)
            return true;
    }
    return false;
}

int main()
{
    fin >> N;
    for(i = 0; i < N; i++)
        fin >> S1[i] >> S2[i];
    for(i = 0; i < N; i++)
        for(j = 0; j < N; j++)
            F[i][j] = isSubsequence(S1[i], S2[j]);
    for(k = 0; k < N; k++)
        dp[0][1 << k] = F[0][k];
    for(i = 1; i < N; i++)
        for(k = 1; k < (1 << N); k++)
            if(cntBits(k) == i + 1)
            {
                for(j = 0; (1 << j) <= k; j++)
                    if(k & (1 << j) && F[i][j])
                    dp[i][k] = dp[i][k] + dp[i - 1][k ^ (1 << j)];
            }
    ll fact = 1;
    for(i = 1; i <= N; i++)
        fact *= i;
    fout << fact - dp[N - 1][(1 << N) - 1] << "\n";
    return 0;
}
