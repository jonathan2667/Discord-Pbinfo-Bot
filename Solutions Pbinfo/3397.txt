// Sursa: Oprea Cosmin-Dumitru
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>

#define NMax 1000000

#define N1 100000
#define H1 1000000000

#define N2 1000000
#define H2 10000

using namespace std;

int v[NMax+1], freq[H2+1], f3df[3], cntDiffFreq, freqNum[3], cntFreqNum;

void reset()
{
    f3df[0] = f3df[1] = f3df[2] = 0;
    freqNum[0] = freqNum[1] = freqNum[2] = 0;
    cntDiffFreq = cntFreqNum = 0;
}

inline void updateFrequencyCounter(int F)
{
    if (!F) {
        return;
    }
    if (F != f3df[0] && F != f3df[1] && F != f3df[2]) {
        f3df[cntDiffFreq++] = F;
    }
    for (int i = 0; i < 3; ++i){
        if (F == f3df[i]) {
            ++freqNum[i];
        }
    }
}

bool canMakeItPerfect()
{
    if (cntDiffFreq >= 3) {
        return false;
    }

    if (freqNum[0]*f3df[0] == 1 || freqNum[1]*f3df[1] == 1) {
        return true;
    }

    if (freqNum[0] == 1 && f3df[0]-1 == f3df[1]) {
        return true;
    }
    if (freqNum[1] == 1 && f3df[1]-1 == f3df[0]) {
        return true;
    }

    return false;
}

int frequencyArraySolution(int n, int HMax)
{
    reset();
    memset(freq, 0, sizeof(freq));

    for (int h = 0; h < n; ++h) {
        ++freq[v[h]];
    }

    for (int h = 1; h <= HMax && cntDiffFreq < 3; ++h) {
        updateFrequencyCounter(freq[h]);
    }

    return cntDiffFreq == 1 || canMakeItPerfect();
}

int sortingSolution(int n)
{
    reset();
    std::sort(v, v + n);

    int crtValue = v[0], refFreq = 0;
    for (; refFreq < n && v[refFreq] == crtValue; ++refFreq) ;

    updateFrequencyCounter(refFreq);

    for (int i = refFreq; i < n && cntDiffFreq < 3; ++i) {
        crtValue = v[i];

        int pos = i + 1;
        for (; pos < n && v[pos] == crtValue; ++pos) ;

        updateFrequencyCounter(pos - i);

        i = pos - 1;
    }

    return cntDiffFreq == 1 || canMakeItPerfect();
}

int main()
{
    int T;
    freopen("gard.in", "r", stdin);
    freopen("gard.out", "w", stdout);

    scanf("%d", &T);

    while(T--) {
        int HMax = 0, n;

        scanf("%d", &n);
        for (int i = 0; i < n; ++i) {
            scanf("%d", v + i);
            HMax = v[i] > HMax ? v[i] : HMax;
        }

        int result;
        if (n <= N2 && HMax <= H2) {
            result = frequencyArraySolution(n, HMax);
        } else {
            result = sortingSolution(n);
        }
        printf("%d\n", result);
    }

    return 0;
}
