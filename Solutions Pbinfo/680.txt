/*
    Solutie subsecventa de suma maxima/minima
    Complexitate: O(N)
    prof. Eugen Nodea
*/
# include <fstream>
# include <climits>
# include <cmath>
# define NMax 100003
using namespace std;

int i, n, Lmax;
int a[NMax];
long long Max = -LONG_MAX;
long long smax[NMax], smin[NMax];
int pozM[NMax];
int pozm[NMax];

void ssm_st_dr(long long smax[NMax], int poz[NMax], int semn)
{
    smax[1] =  a[1]; poz[1] = 1;
    for (int i=2; i<=n; ++i)
    {
        if (semn * smax[i-1] >= 0)
        {
            smax[i]  = a[i] + smax[i-1];
            poz[i] = poz[i-1];
        }
        else
        {
            smax[i]  = a[i];
            poz[i] = i;
        }
    }
}
void ssm_dr_st(long long smax[NMax], int poz[NMax], int semn)
{
    smax[n-1] = a[n]; poz[n-1] = n;
    for (int i=n-2; i>0; --i)
    {
        if (semn * smax[i+1] >= 0)
        {
            smax[i]  = a[i+1] + smax[i+1];
            poz[i] = poz[i+1];
        }
        else
        {
            smax[i]  = a[i+1];
            poz[i] = i+1;
        }
    }
}
void sol(long long smax[NMax], long long smin[NMax], int pozM[NMax], int pozm[NMax], int semn)
{
    for (int i=1; i<n; ++i)
    {
        long long x = semn * (smax[i] - smin[i]);
        if (x > Max)
        {
            Max = x;
            Lmax = semn * (pozM[i] - pozm[i]);
        }
    }
}
int main()
{
    freopen("ksplit.in", "r", stdin);
    freopen("ksplit.out","w", stdout);

    scanf("%d", &n);

    for (i=1; i<=n; ++i)
        scanf("%d", &a[i]);

    ssm_st_dr(smax, pozM, 1);
    ssm_dr_st(smin, pozm, -1);
    sol(smax, smin, pozm, pozM, 1);

    ssm_st_dr(smax, pozM, -1);
    ssm_dr_st(smin, pozm, 1);
    sol(smax, smin, pozM, pozm, -1);

    printf("%lld\n%d\n", Max, Lmax + 1);

    return 0;
}
