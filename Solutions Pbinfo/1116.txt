//Mihai Popa
//O(n) - 100p

#include<stdio.h>
#include<vector>
#include<algorithm>
#include <cassert>

#define maxdim 200005
#define mod 666013

using namespace std;

int n,k;
int special[maxdim],viz[maxdim],T[maxdim],D[maxdim][2];
vector<int>G[maxdim];

void dfs ( int nod ){
    viz[nod] = 1;
    
    int sons = 0;
    for ( vector<int>::iterator itt = G[nod].begin() ; itt != G[nod].end() ; ++itt ){
        int fiu = *itt;
        if ( viz[fiu] ) continue ;
        
        ++sons; T[fiu] = nod;
        dfs(fiu);
    }
    
    if ( !sons ){
        if ( special[nod] ){
            D[nod][0] = 0,D[nod][1] = 1;
        }
        else{
            D[nod][0] = 1,D[nod][1] = 0;
        }
        return ;
    }
    
    vector<int>localD[2];
    localD[0].resize(sons+1);
    localD[1].resize(sons+1);
    
    localD[0][0] = 1; int ind = 0;
    for ( vector<int>::iterator itt = G[nod].begin() ; itt != G[nod].end() ; ++itt ){
        int fiu = *itt;
        if ( T[fiu] != nod )    continue ;
        
        ++ind;
        localD[0][ind] = (1LL*localD[0][ind-1]*(D[fiu][0]+D[fiu][1]))%mod;
        localD[1][ind] = (1LL*localD[0][ind-1]*D[fiu][1] + 1LL*localD[1][ind-1]*(D[fiu][0]+D[fiu][1]))%mod;
    }
    
    if ( !special[nod] ){
        D[nod][0] = localD[0][ind];
        D[nod][1] = localD[1][ind];
    }
    else{
        D[nod][0] = 0;
        D[nod][1] = localD[0][ind];
    }
}

int main () {
    
    freopen("karb.in","r",stdin);
    freopen("karb.out","w",stdout);
    
    scanf("%d %d",&n,&k);
    assert(n >= 1 && n <= 200000);
    assert(k >= 1 && k <= n);
    int x,y;
    for ( int i = 1 ; i <= k ; ++i ){
        scanf("%d",&x);
        assert(!special[x]);
        assert(x >= 1 && x <= n);
        special[x] = x;
    }
    for ( int i = 1 ; i < n ; ++i ){
        scanf("%d %d",&x,&y);
        assert(x >= 1 && x <= n);
        assert(y >= 1 && y <= n);
        assert(x != y);
        G[x].push_back(y);
        G[y].push_back(x);
    }
    
    dfs(1);
    
    printf("%d\n",D[1][1]);
    
    return 0;
}
